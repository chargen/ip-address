[library A Three-Class IP Address Proposal, Revision 1
    [quickbook 1.1]
    [id ipaddress]
]

[/-----------------------------------------------------------------------------]

[template std_note[text]
\[['Note:] [text] '''&mdash;'''['end note]\]
]

[template inline_note[text] \[['Note:] [text] '''&mdash;'''['end note]\] ]

[template std_example[text code]
\[['Example:] [text]
[code]
'''&mdash;'''['end example]\]
]

[template function_block[text]
[:[text]]
]

[template function_requires[text]
[:['Requires:] [text]]
]

[template function_effects[text]
[:['Effects:] [text]]
]

[template function_returns[text]
[:['Returns:] [text]]
]

[template function_throws[text]
[:['Throws:] [text]]
]

[template function_postconditions[text]
[:['Postconditions:] [text]]
]

[template function_complexity[text]
[:['Complexity:] [text]]
]

[template function_remarks[text]
[:['Remarks:] [text]]
]

[template function_notes[text]
[:['Notes:] [text]]
]

[template function_note[text]
[:\[['Note:] [text] '''&mdash;'''['end note]\]]
]

[template function_example[text]
[:\[['Example:] [text]
'''&mdash;'''['end example]\]]
]

[template mdash[] '''&mdash; ''']

[/-----------------------------------------------------------------------------]

[def __POSIX__ /POSIX/]
[def __inet_ntop__ [@http://www.opengroup.org/onlinepubs/000095399/functions/inet_ntop.html `inet_ntop()`]]
[def __inet_pton__ [@http://www.opengroup.org/onlinepubs/000095399/functions/inet_pton.html `inet_pton()`]]
[def __Asio__ [@http://www.boost.org/libs/asio Boost.Asio]]
[def __N2175__ [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2175.pdf N2175] "Networking Library Proposal for TR2 (Revision 1)"]
[def __dotdotdot__ ...]

[/-----------------------------------------------------------------------------]

[template RFC4291[] \[[link ref-RFC4291 RFC4291]\]]

[/-----------------------------------------------------------------------------]

[section Overview]

This proposal describes a three-class design for IP address classes:

* A vocabulary type, `ip::address`, for use in IP version independent code.

* An IPv4-specific type `ip::address_v4`.

* An IPv6-specific type `ip::address_v6`.

[endsect]

[/-----------------------------------------------------------------------------]

[section Motivation and Scope]

[section Scope]

This proposal describes only types necessary to support the manipulation of IP
(Internet Protocol) addresses. Other networking facilities, such as sockets and
name resolution, are outside the scope of this proposal.

[endsect]

[section Target Audience]

The proposed interface is primarily intended for use by developers writing
programs with a networking component, and in particular programs that utilise
internet protocols such as TCP and UDP.

[endsect]

[section Reference Implementation]

This proposal is based on the IP address classes in the __Asio__ library. The
proposed text was originally from __N2175__ with small modifications to reflect
enhancements made to __Asio__ since 2007.

In this revision, the proposed text has been updated to reflect feedback and
discussion from the Bristol 2013 meeting of SG4. A reference implementation of
the proposal is available from [@https://github.com/chriskohlhoff/ip-address
GitHub].

[endsect]

[endsect]

[/-----------------------------------------------------------------------------]

[section Impact On the Standard]

This is a pure library proposal. It does not add any new language features, nor
does it alter any existing standard library headers.

This library can be implemented using compilers that conform to the C++11
standard. An implementation of this library requires operating system-specific
functions that lie outside the C++11 standard.

[endsect]

[/-----------------------------------------------------------------------------]

[section Design Decisions]

For more information on the motivating design decisions for the three-class
design, please consult
[@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3603.html N3603].

In this section we list some of the additional proposed changes that were
considered but rejected. The changes incorporated since N3603 are described
[link ipaddress.changes at the end].

[section Overloads of hton and ntoh]

One suggestion was that the proposal should include overloads of `hton` and
`ntoh` for the address types. The motivating use case was that address objects
may be used directly as part of standard-layout aggregates that are ultimately
intended for network transmission.

This change was rejected on the basis that the applying `hton` to a class type
(as opposed to a simple integer) may result in an object that is in an invalid
or nonsensical state. As a matter of style, the author feels that the address
types should be treated as abstractions without necessarily forcing a
particular internal implementation.

The addresses' `to_bytes()` member functions can already be used to obtain a
representation of the address in network byte order. To further aid the
motivating use case, the `bytes_type` types have been changed to be [link
ipaddress.bytes_type unique types].

[endsect]

[section Specialisation of less<>]

Another suggestion was that the address types should specialise `std::less<>`
rather than provide `operator<` and friends. This change was rejected since it
would appear to render the address types incompatible with other standard
library types, such as `std::tuple<>`, which apply `operator<` to their elements.

[endsect]

[endsect]

[/-----------------------------------------------------------------------------]

[section Further Work]

[section Address Iteration]

It has been suggested in the SG4 discussion forum that the address classes
include the ability to determine the predecessor or successor of an address. By
this we mean that given an address 1.2.3.4, the predecessor address is 1.2.3.3
and the successor is 1.2.3.5.

The author feels that this feature is not a core responsibility of the address
classes, but if it is desired it can instead be supported by a richer
range-based interface. The following is a sketch of this approach:

  class address_iterator_v4
  {
  public:
    typedef std::ptrdiff_t difference_type;
    typedef address_v4 value_type;
    typedef const address_v4* pointer;
    typedef const address_v4& reference;
    typedef std::bidirectional_iterator_tag iterator_category;

    explicit address_iterator_v4(const address_v4& addr);

    const address_v4& operator*() const;
    const address_v4* operator->() const;

    address_iterator_v4& operator++();
    address_iterator_v4 operator++(int);

    address_iterator_v4& operator--();
    address_iterator_v4 operator--(int);

    friend bool operator==(const address_iterator_v4& a, const address_iterator_v4& b);
    friend bool operator!=(const address_iterator_v4& a, const address_iterator_v4& b);

  private:
    // ...
  };

  class address_range_v4
  {
  public:
    address_range_v4();
    explicit address_range_v4(const address_v4& addr);
    explicit address_range_v4(const address_v4& addr, const address_v4& mask);

    address_v4 network() const;
    address_v4 netmask() const;
    address_v4 broadcast() const;

    typedef address_iterator_v4 iterator;
    iterator begin() const;
    iterator end() const;
    iterator find(const address_v4& addr) const;

  private:
    // ...
  };

This may be used as in the following example:

  address_range_v4 range(
      make_address_v4("192.168.1.0"),
      make_address_v4("255.255.255.0"));

  for (auto a: range)
    std::cout << a << std::endl;

  std::cout << "---" << std::endl;

  std::for_each(
      range.find(make_address_v4("192.168.1.250")),
      range.end(),
      [](address_v4 a) { std::cout << a << std::endl; });

If SG4 determines that this feature is desirable, it may be added to this
proposal or developed as a separate proposal. The author favours the latter.

[endsect]

[endsect]

[/-----------------------------------------------------------------------------]

[section Proposed Text]

[include:definitions definitions.qbk]
[include:error_reporting error_reporting.qbk]

[section:internet_protocol Internet protocol addresses]

This clause describes components that C++ programs may use to manipulate IP
addresses.

[include:headers headers/network.qbk]

[include:classes classes/ip__address.qbk]
[include:classes classes/ip__address_v4.qbk]
[include:classes classes/ip__address_v6.qbk]
[include:classes classes/ip__bad_address_cast.qbk]
[include:functions functions/ip__address_cast.qbk]
[include:classes classes/hash.qbk]
[include:functions functions/literals.qbk]

[endsect]

[endsect]

[/-----------------------------------------------------------------------------]

[section:changes Changes in This Revision]

In this revision of the proposal, we include changes made based on feedback and
discussion from the 2013 meeting of SG4 at Bristol, where N3603 was discussed.

[section Namespace]

This revision moves the proposed types and functions from the `std::` namespace
to `std::experimental::`.

[endsect]

[section A Version-Independent Vocabulary Type]

The `ip::address` class has been modified so that the version-specific types do
not appear in its interface. An approach based on the `any` class has been
adopted (see Library Fundamentals working draft), and address types may be
explicitly converted using the `address_cast<>` function. The version-specific
types are implicitly convertible to `ip::address` via a template constructor.

For example:

  address_v4 a;
  address b = a; // ok, implicit conversion
  address c = address_cast<address>(a); // ok, explicit conversion
  address_v4 d = address_cast<address_v4>(b); // ok, explicit conversion
  address_v6 e = address_cast<address_v6>(b); // invalid, throws bad_address_cast

[endsect]

[section Use of noexcept]

Many functions have now been marked `noexcept`.

[endsect]

[section Explicit Creation from Strings]

This replaces the `from_string()` static member functions with new free
functions `make_address()`, `make_address_v4()` and `make_address_v6()`. These
functions allow explicit creation of the address types from strings and other
types, such as an array of bytes or an integer in host byte order. For example,
one overload throws an exception on failure:

  address_v4 a = make_address_v4("127.0.0.1"); // succeeds
  address_v4 b = make_address_v4("::1"); // throws

and another overload provides a non-throwing alternative:

  error_code ec;
  address_v4 b = make_address_v4("127.0.0.1", ec); // succeeds, clears ec
  address_v4 b = make_address_v4("::1", ec); // sets ec

An explicit template constructor has been added to also support this style of
use:

  address c("127.0.0.1");

This constructor simply forwards the arguments to the appropriate
`make_address()` overload.

[endsect]

[section String Literals]

Support for IP address literals has been included. For example:

  using namespace std::experimental::net_literals;
  auto addr = "127.0.0.1"ip;
  auto v4_addr = "255.255.255.255"ipv4;
  auto v6_addr = "::1"ipv6;

[endsect]

[section:bytes_type Strongly-Typed Byte Representations]

The nested typedefs `bytes_type` have been changed to be unique standard-layout
types. Objects of type `bytes_type` are implicitly convertible to the
corresponding address class. This is intended to support the following use
case, where the byte representations of addresses are included as part of a
larger standard-layout structure, such as a packet definition:

  struct header
  {
    address_v4::bytes_type from;
    address_v4::bytes_type to;
    // ...
  };

  struct message
  {
    header hdr;
    // ...
  };

  // ...

  address_v4 old_address = "1.2.3.4"ipv4;
  address_v4 new_address = "4.3.2.1"ipv4;

  message m;
  receive_message(m); // e.g. reads bytes from a socket
  if (m.hdr.to == old_address)
    m.hdr.to = new_address.to_bytes();

[endsect]

[section Use of constexpr]

The `constexpr` keyword has been applied to some of the functions in the
proposal. The rationale for this change is that many of the equivalent
__POSIX__ macros can be used in constant expressions.

[endsect]

[endsect]

[/-----------------------------------------------------------------------------]

[section Acknowledgements]

The author would like to thank Arash Partow, Jamie Allsop, James Anderson and
Kyle Kloepper for their feedback and suggestions.

[endsect]

[/-----------------------------------------------------------------------------]

[section References]

[#ref-RFC4291] \[RFC4291\] Hinden, R. and Deering, S.,
['RFC 4291: Internet Protocol Version 6 (IPv6) Addressing Architecture], 2006,
[@http://www.ietf.org/rfc/rfc4291.txt].

[endsect]
