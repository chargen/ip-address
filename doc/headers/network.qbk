[section Header [^<network>] synopsis]

  namespace std {
    namespace experimental {
      namespace net {

        // Internet protocol addresses:

        namespace ip {

          struct v4_mapped_t {};
          constexpr v4_mapped_t v4_mapped;

          class ``[link classes.ip__address address]``;
          class ``[link classes.ip__address_v4 address_v4]``;
          class ``[link classes.ip__address_v6 address_v6]``;

          class ``[link classes.ip__bad_address_cast bad_address_cast]``;

          // ``[link classes.ip__address__comparisons address comparisons]``:
          bool operator==(const address&, const address&) noexcept;
          bool operator!=(const address&, const address&) noexcept;
          bool operator< (const address&, const address&) noexcept;
          bool operator> (const address&, const address&) noexcept;
          bool operator<=(const address&, const address&) noexcept;
          bool operator>=(const address&, const address&) noexcept;

          // ``[link classes.ip__address_v4__comparisons address_v4 comparisons]``:
          bool operator==(const address_v4&, const address_v4&) noexcept;
          bool operator!=(const address_v4&, const address_v4&) noexcept;
          bool operator< (const address_v4&, const address_v4&) noexcept;
          bool operator> (const address_v4&, const address_v4&) noexcept;
          bool operator<=(const address_v4&, const address_v4&) noexcept;
          bool operator>=(const address_v4&, const address_v4&) noexcept;

          // ``[link classes.ip__address_v6__comparisons address_v6 comparisons]``:
          bool operator==(const address_v6&, const address_v6&) noexcept;
          bool operator!=(const address_v6&, const address_v6&) noexcept;
          bool operator< (const address_v6&, const address_v6&) noexcept;
          bool operator> (const address_v6&, const address_v6&) noexcept;
          bool operator<=(const address_v6&, const address_v6&) noexcept;
          bool operator>=(const address_v6&, const address_v6&) noexcept;

          // ``[link classes.ip__address__creation address creation]``:
          address make_address(const char*);
          address make_address(const char*, error_code&) noexcept;
          address make_address(const string&);
          address make_address(const string&, error_code&) noexcept;

          // ``[link classes.ip__address_v4__creation address_v4 creation]``:
          constexpr address_v4 make_address_v4(const address_v4::bytes_type&);
          constexpr address_v4 make_address_v4(unsigned long);
          constexpr address_v4 make_address_v4(v4_mapped_t, const address_v6&);
          address_v4 make_address_v4(const char*);
          address_v4 make_address_v4(const char*, error_code&) noexcept;
          address_v4 make_address_v4(const string&);
          address_v4 make_address_v4(const string&, error_code&) noexcept;

          // ``[link classes.ip__address_v6__creation address_v6 creation]``:
          constexpr address_v6 make_address_v6(const address_v6::bytes_type&, unsigned long = 0);
          constexpr address_v6 make_address_v6(v4_mapped_t, const address_v4&) noexcept;
          address_v6 make_address_v6(const char*);
          address_v6 make_address_v6(const char*, error_code&) noexcept;
          address_v6 make_address_v6(const string&);
          address_v6 make_address_v6(const string&, error_code&) noexcept;

          // ``[link classes.ip__address__io address I/O]``:
          template<class CharT, class Traits>
            basic_ostream<CharT, Traits>& operator<<(
              basic_ostream<CharT, Traits>&, const address&);

          // ``[link classes.ip__address_v4__io address_v4 I/O]``:
          template<class CharT, class Traits>
            basic_ostream<CharT, Traits>& operator<<(
              basic_ostream<CharT, Traits>&, const address_v4&);

          // ``[link classes.ip__address_v6__io address_v6 I/O]``:
          template<class CharT, class Traits>
            basic_ostream<CharT, Traits>& operator<<(
              basic_ostream<CharT, Traits>&, const address_v6&);

          // ``[link functions.ip__address_cast address conversions]``:
          template <class T> constexpr T address_cast(const address&) noexcept(``['see below]``);
          template <class T> constexpr T address_cast(const address_v4&) noexcept(``['see below]``);
          template <class T> constexpr T address_cast(const address_v6&) noexcept(``['see below]``);

        } // namespace ip
      } // namespace net

      // ``[link classes.hash hash support]``
      template <class T> struct hash;
      template <> struct hash<net::ip::address>;
      template <> struct hash<net::ip::address_v4>;
      template <> struct hash<net::ip::address_v6>;

      inline namespace literals {
        inline namespace net_literals {

          // ``[link functions.literals suffixes for address literals]``
          net::ip::address operator "" ip(const char*, size_t);
          net::ip::address_v4 operator "" ipv4(const char*, size_t);
          net::ip::address_v6 operator "" ipv6(const char*, size_t);

        } // namespace net_literals
      } // namespace literals
    } // namespace experimental
  } // namespace std

[endsect]
