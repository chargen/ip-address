[section:ip__address Class [^ip::address]]

  namespace std {
    namespace experimental {
      namespace net {
        namespace ip {

          class address
          {
          public:
            // constructors:
            constexpr address() noexcept;
            constexpr address(const address& a) noexcept;
            template <class T> constexpr address(const T& t) noexcept(``['see below]``);
            template <class... T> explicit constexpr address(T&&... t);

            // assignment:
            address& operator=(const address& a) noexcept;

            // members:
            constexpr bool is_unspecified() const noexcept;
            constexpr bool is_loopback() const noexcept;
            constexpr bool is_multicast() const noexcept;
            constexpr bool is_v4() const noexcept;
            constexpr bool is_v6() const noexcept;
            string to_string() const;
            string to_string(error_code& ec) const;
          };

          // address comparisons:
          bool operator==(const address& a, const address& b) noexcept;
          bool operator!=(const address& a, const address& b) noexcept;
          bool operator< (const address& a, const address& b) noexcept;
          bool operator> (const address& a, const address& b) noexcept;
          bool operator<=(const address& a, const address& b) noexcept;
          bool operator>=(const address& a, const address& b) noexcept;

          // address creation:
          address make_address(const char*);
          address make_address(const char*, error_code&) noexcept;
          address make_address(const string&);
          address make_address(const string&, error_code&) noexcept;

          // address I/O:
          template<class CharT, class Traits>
            basic_ostream<CharT, Traits>& operator<<(
              basic_ostream<CharT, Traits>& os, const address& addr);

        } // namespace ip
      } // namespace net
    } // namespace experimental
  } // namespace std

[section [^ip::address] constructors]

  constexpr address() noexcept;

[function_effects Constructs an object of class `address`.]

[function_postconditions The postconditions of this function are indicated in
the table below.]

[table address::address() effects
  [[expression][value]]
  [
    [`is_v4()`]
    [`false`]
  ]
  [
    [`is_v6()`]
    [`false`]
  ]
]

  constexpr address(const address& a);

[function_effects Constructs an object of class `address`.]

[function_postconditions `*this == a`]

  template <class T> constexpr address(const T& t) noexcept(``['see below]``);

[function_remarks This constructor shall not participate in overload resolution
unless `is_same<T, address>::value` is `false`, and the expression
`address_cast<address>(t)` is valid and yields an rvalue of type `address`. The
expression inside `noexcept` shall be equivalent to
`noexcept(address_cast<address>(t))`.]

[function_effects Constructs an object of type `address` with the result of the
expression `address_cast<address>(t)`.]

[function_throws Nothing unless the expression `address_cast<address>(t)`
throws an exception.]

  template <class... T> explicit constexpr address(T&&... t);

[function_remarks This constructor shall not participate in overload resolution
unless the expression `make_address(forward<T>(t).``.``.)` is valid and yields an
rvalue of type `address`.]

[function_effects Constructs an object of type `address` with the result of the
expression `make_address(forward<T>(t).``.``.)`.]

[endsect]

[section [^ip::address] assignment]

  address& operator=(const address& a);

[function_postconditions `*this == a`]

[function_returns `*this`]

[endsect]

[section [^ip::address] members]

  constexpr bool is_unspecified() const noexcept;

[function_returns If `is_v4() == true`, returns
`address_cast<address_v4>(*this).is_unspecified()`. If `is_v6() == true`, returns
`address_cast<address_v6>(*this).is_unspecified()`. Otherwise returns `false`.]

  constexpr bool is_loopback() const noexcept;

[function_returns If `is_v4() == true`, returns
`address_cast<address_v4>(*this).is_loopback()`. If `is_v6() == true`, returns
`address_cast<address_v6>(*this).is_loopback()`. Otherwise returns `false`.]

  constexpr bool is_multicast() const noexcept;

[function_returns If `is_v4() == true`, returns
`address_cast<address_v4>(*this).is_multicast()`. If `is_v6() == true`, returns
`address_cast<address_v6>(*this).is_multicast()`. Otherwise returns `false`.]

  constexpr bool is_v4() const noexcept;

[function_returns `true` if the object contains an IP version 4 address.]

  constexpr bool is_v6() const noexcept;

[function_returns `true` if the object contains an IP version 6 address.]

  string to_string() const;
  string to_string(error_code& ec) const;

[function_returns If `is_v4() == true`, returns
`address_cast<address_v4>(*this).to_string(ec)`. If `is_v6() == true`, returns
`address_cast<address_v6>(*this).to_string(ec)`. Otherwise throws `bad_address_cast`.]

[endsect]

[section:ip__address__comparisons [^ip::address] comparisons]

  bool operator==(const address& a, const address& b) noexcept;

[function_returns `a_v4 == b_v4 && a_v6 == b_v6`, where:[br]
 [mdash] `a_v4` is the value of `a.is_v4() ? address_cast<address_v4>(a) : address_v4()`;[br]
 [mdash] `b_v4` is `b.is_v4() ? address_cast<address_v4>(b) : address_v4()`;[br]
 [mdash] `a_v6` is `a.is_v6() ? address_cast<address_v6>(a) : address_v6()`; and[br]
 [mdash] `b_v6` is `b.is_v6() ? address_cast<address_v6>(b) : address_v6()`.]

  bool operator!=(const address& a, const address& b) noexcept;

[function_returns `!(a == b)`.]

  bool operator< (const address& a, const address& b) noexcept;

[function_returns `a_v6 < b_v6 || a_v6 == b_v6 && a_v4 < b_v4`, where:[br]
 [mdash] `a_v4` is the value of `a.is_v4() ? address_cast<address_v4>(a) : address_v4()`;[br]
 [mdash] `b_v4` is `b.is_v4() ? address_cast<address_v4>(b) : address_v4()`;[br]
 [mdash] `a_v6` is `a.is_v6() ? address_cast<address_v6>(a) : address_v6()`; and[br]
 [mdash] `b_v6` is `b.is_v6() ? address_cast<address_v6>(b) : address_v6()`.]

  bool operator> (const address& a, const address& b) noexcept;

[function_returns `b < a`.]

  bool operator<=(const address& a, const address& b) noexcept;
  
[function_returns `!(b < a)`.]

  bool operator>=(const address& a, const address& b) noexcept;

[function_returns `!(a < b)`.]

[endsect]

[section:ip__address__creation [^ip::address] creation]

  address make_address(const char* str);
  address make_address(const char* str, error_code& ec) noexcept;
  address make_address(const string& str);
  address make_address(const string& str, error_code& ec) noexcept;

[function_effects Converts a string representation of an address into an object
of class `address`, as if by calling:
``
  address a;
  address_v6 v6a = make_address_v6(str, ec);
  if (!ec)
    a = v6a;
  else
  {
    address_v4 v4a = make_address_v4(str, ec);
    if (!ec)
      a = v4a;
  }
``]

[function_returns `a`.]

[endsect]

[section:ip__address__io [^ip::address] I/O]

  template<class CharT, class Traits>
    basic_ostream<CharT, Traits>& operator<<(
      basic_ostream<CharT, Traits>& os, const address& addr);

[function_effects Outputs the string representation of the address to the
stream, as if it were implemented as follows:
``
  error_code ec;
  string s = addr.to_string(ec);
  if (ec)
  {
    if (os.exceptions() & ios_base::failbit)
      throw system_error(ec);
    else
      os.setstate(ios_base::failbit);
  }
  else
    for (string::iterator i = s.begin(); i != s.end(); ++i)
      os << os.widen(*i);
``]

[function_returns `os`.]

[endsect]

[endsect]
